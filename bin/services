#!/bin/bash

# Define paths
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
APP_ROOT=$(dirname "$SCRIPT_DIR")
DOCKER_COMPOSE_FILE="$APP_ROOT/docker-compose.yml"

# Function to check if a command exists
command_exists() {
  command -v "$1" > /dev/null 2>&1
}

# Function to get available services from the docker-compose.yml file
available_services() {
  if [[ ! -f $DOCKER_COMPOSE_FILE ]]; then
    echo "Error: $DOCKER_COMPOSE_FILE not found."
    exit 1
  fi

  # Extract service names from the docker-compose.yml file
  grep -E '^\s{2}[a-zA-Z0-9_-]+:' $DOCKER_COMPOSE_FILE | sed 's/://g' | xargs
}

# Function to show help message
show_help() {
  echo "Usage:"
  echo "  bin/services up [-d]                 - Start all services in attached or detached (daemon) mode"
  echo "  bin/services up SERVICE [-d]         - Start a specific service in attached or detached (daemon) mode"
  echo "  bin/services down                    - Stop all services"
  echo "  bin/services restart [SERVICE|all]   - Restart all or a specific service"
  echo "  bin/services known                   - List all available services"
  echo "  bin/services --help or -h            - Show this help message"
}

# Check if Docker and Docker Compose are installed
if ! command_exists docker; then
  echo "Docker is not installed. Please install Docker and try again."
  exit 1
fi

if ! command_exists docker-compose; then
  echo "Docker Compose is not installed. Please install Docker Compose and try again."
  exit 1
fi

# Get the list of available services
SERVICES=$(available_services)

# Function to check if a service exists in the list of available services
service_exists() {
  local service="$1"
  for s in $SERVICES; do
    if [[ "$s" == "$service" ]]; then
      return 0
    fi
  done
  return 1
}

# Handle commands
case "$1" in
  up)
    SERVICE=${2:-all}
    DETACHED=false

    # Check for -d flag
    if [[ "$SERVICE" == "-d" ]]; then
      SERVICE="all"
      DETACHED=true
    elif [[ "$3" == "-d" ]]; then
      DETACHED=true
    fi

    # Validate the service
    if [[ "$SERVICE" != "all" ]]; then
      if ! service_exists "$SERVICE"; then
        echo "Error: no such service: '$SERVICE' found in $(realpath $DOCKER_COMPOSE_FILE)."
        echo "Available services: $SERVICES"
        exit 1
      fi
    fi

    if $DETACHED; then
      if [[ "$SERVICE" == "all" ]]; then
        echo "Starting all services in detached (daemon) mode..."
        docker-compose -f "$DOCKER_COMPOSE_FILE" up -d
      else
        echo "Starting $SERVICE service in detached (daemon) mode..."
        docker-compose -f "$DOCKER_COMPOSE_FILE" up -d "$SERVICE"
      fi
    else
      if [[ "$SERVICE" == "all" ]]; then
        echo "Starting all services in attached mode..."
        docker-compose -f "$DOCKER_COMPOSE_FILE" up
      else
        echo "Starting $SERVICE service in attached mode..."
        docker-compose -f "$DOCKER_COMPOSE_FILE" up "$SERVICE"
      fi
    fi
    ;;
  down)
    RUNNING=$(docker-compose -f "$DOCKER_COMPOSE_FILE" ps --services --filter "status=running")
    if [[ -z "$RUNNING" ]]; then
      echo "Nothing to stop. No services are running."
    else
      echo "Stopping all services..."
      docker-compose -f "$DOCKER_COMPOSE_FILE" down
      echo "All services have been stopped."
    fi
    ;;
  restart)
    SERVICE=${2:-all}
    if [[ "$SERVICE" == "all" ]]; then
      echo "Restarting all services..."
      docker-compose -f "$DOCKER_COMPOSE_FILE" restart
    elif service_exists "$SERVICE"; then
      echo "Restarting $SERVICE service..."
      docker-compose -f "$DOCKER_COMPOSE_FILE" restart "$SERVICE"
    else
      echo "Error: no such service: '$SERVICE' found in $(realpath $DOCKER_COMPOSE_FILE)."
      echo "Available services: $SERVICES"
      exit 1
    fi
    ;;
  known)
    echo "Available services: $SERVICES"
    ;;
  --help|-h)
    show_help
    ;;
  *)
    echo "Invalid command. Use 'bin/services --help' or 'bin/services -h' for usage."
    exit 1
    ;;
esac
